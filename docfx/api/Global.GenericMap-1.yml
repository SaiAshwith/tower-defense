### YamlMime:ManagedReference
items:
- uid: Global.GenericMap`1
  commentId: T:Global.GenericMap`1
  id: GenericMap`1
  parent: Global
  children:
  - Global.GenericMap`1.Add``1(`0,``0)
  - Global.GenericMap`1.ContainsKey(`0)
  - Global.GenericMap`1.GetValue``1(`0)
  - Global.GenericMap`1.TryGetValue``1(`0,``0@)
  langs:
  - csharp
  - vb
  name: GenericMap<TKey>
  nameWithType: GenericMap<TKey>
  fullName: GenericMap<TKey>
  type: Class
  source:
    id: GenericMap
    path: D:\GitProjects\tower-defense\Assets\Scripts\Events\GenericMap.cs
    startLine: 8
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nA wrapper around dictionary to support generic values.\n"
  example: []
  syntax:
    content: public class GenericMap<TKey>
    typeParameters:
    - id: TKey
      description: Type parameter for the keys in the map
    content.vb: Public Class GenericMap(Of TKey)
  inheritance:
  - System.Object
  nameWithType.vb: GenericMap(Of TKey)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: GenericMap(Of TKey)
  name.vb: GenericMap(Of TKey)
- uid: Global.GenericMap`1.Add``1(`0,``0)
  commentId: M:Global.GenericMap`1.Add``1(`0,``0)
  id: Add``1(`0,``0)
  parent: Global.GenericMap`1
  langs:
  - csharp
  - vb
  name: Add<TValue>(TKey, TValue)
  nameWithType: GenericMap<TKey>.Add<TValue>(TKey, TValue)
  fullName: GenericMap<TKey>.Add<TValue>(TKey, TValue)
  type: Method
  source:
    id: Add
    path: D:\GitProjects\tower-defense\Assets\Scripts\Events\GenericMap.cs
    startLine: 18
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nAdd a key-value pair to the map\n"
  example: []
  syntax:
    content: public void Add<TValue>(TKey key, TValue value)
    parameters:
    - id: key
      type: '{TKey}'
      description: Key for this entry
    - id: value
      type: '{TValue}'
      description: Value for this entry
    typeParameters:
    - id: TValue
      description: Type parameter for value
    content.vb: Public Sub Add(Of TValue)(key As TKey, value As TValue)
  overload: Global.GenericMap`1.Add*
  nameWithType.vb: GenericMap(Of TKey).Add(Of TValue)(TKey, TValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: GenericMap(Of TKey).Add(Of TValue)(TKey, TValue)
  name.vb: Add(Of TValue)(TKey, TValue)
- uid: Global.GenericMap`1.TryGetValue``1(`0,``0@)
  commentId: M:Global.GenericMap`1.TryGetValue``1(`0,``0@)
  id: TryGetValue``1(`0,``0@)
  parent: Global.GenericMap`1
  langs:
  - csharp
  - vb
  name: TryGetValue<TValue>(TKey, out TValue)
  nameWithType: GenericMap<TKey>.TryGetValue<TValue>(TKey, out TValue)
  fullName: GenericMap<TKey>.TryGetValue<TValue>(TKey, out TValue)
  type: Method
  source:
    id: TryGetValue
    path: D:\GitProjects\tower-defense\Assets\Scripts\Events\GenericMap.cs
    startLine: 28
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nTry to find the value corresponding to the given key.\n"
  example: []
  syntax:
    content: >-
      public bool TryGetValue<TValue>(TKey key, out TValue value)

          where TValue : class
    parameters:
    - id: key
      type: '{TKey}'
    - id: value
      type: '{TValue}'
    typeParameters:
    - id: TValue
      description: Type parameter for value. Fetched value will be cast to this type.
    return:
      type: System.Boolean
      description: True if a valid value was found
    content.vb: Public Function TryGetValue(Of TValue As Class)(key As TKey, ByRef value As TValue) As Boolean
  overload: Global.GenericMap`1.TryGetValue*
  nameWithType.vb: GenericMap(Of TKey).TryGetValue(Of TValue)(TKey, ByRef TValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: GenericMap(Of TKey).TryGetValue(Of TValue)(TKey, ByRef TValue)
  name.vb: TryGetValue(Of TValue)(TKey, ByRef TValue)
- uid: Global.GenericMap`1.ContainsKey(`0)
  commentId: M:Global.GenericMap`1.ContainsKey(`0)
  id: ContainsKey(`0)
  parent: Global.GenericMap`1
  langs:
  - csharp
  - vb
  name: ContainsKey(TKey)
  nameWithType: GenericMap<TKey>.ContainsKey(TKey)
  fullName: GenericMap<TKey>.ContainsKey(TKey)
  type: Method
  source:
    id: ContainsKey
    path: D:\GitProjects\tower-defense\Assets\Scripts\Events\GenericMap.cs
    startLine: 40
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nCheck if the map contains a value for the given key.\n"
  example: []
  syntax:
    content: public bool ContainsKey(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
      description: Key to be queried
    return:
      type: System.Boolean
      description: True if the key exists
    content.vb: Public Function ContainsKey(key As TKey) As Boolean
  overload: Global.GenericMap`1.ContainsKey*
  nameWithType.vb: GenericMap(Of TKey).ContainsKey(TKey)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: GenericMap(Of TKey).ContainsKey(TKey)
- uid: Global.GenericMap`1.GetValue``1(`0)
  commentId: M:Global.GenericMap`1.GetValue``1(`0)
  id: GetValue``1(`0)
  parent: Global.GenericMap`1
  langs:
  - csharp
  - vb
  name: GetValue<TValue>(TKey)
  nameWithType: GenericMap<TKey>.GetValue<TValue>(TKey)
  fullName: GenericMap<TKey>.GetValue<TValue>(TKey)
  type: Method
  source:
    id: GetValue
    path: D:\GitProjects\tower-defense\Assets\Scripts\Events\GenericMap.cs
    startLine: 49
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nAn unsafe way to get the value.false Might return null.\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use TryGetValue instead.")]

      public TValue GetValue<TValue>(TKey key)

          where TValue : class
    parameters:
    - id: key
      type: '{TKey}'
    typeParameters:
    - id: TValue
      description: Type parameter for the value.
    return:
      type: '{TValue}'
    content.vb: >-
      <Obsolete("Use TryGetValue instead.")>

      Public Function GetValue(Of TValue As Class)(key As TKey) As TValue
  overload: Global.GenericMap`1.GetValue*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use TryGetValue instead.
  nameWithType.vb: GenericMap(Of TKey).GetValue(Of TValue)(TKey)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: GenericMap(Of TKey).GetValue(Of TValue)(TKey)
  name.vb: GetValue(Of TValue)(TKey)
references:
- uid: Global
  name: Global
  nameWithType: Global
  fullName: Global
  nameWithType.vb: ''
  fullName.vb: ''
  name.vb: ''
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Global.GenericMap`1.Add*
  commentId: Overload:Global.GenericMap`1.Add
  name: Add
  nameWithType: GenericMap<TKey>.Add
  fullName: GenericMap<TKey>.Add
  nameWithType.vb: GenericMap(Of TKey).Add
  fullName.vb: GenericMap(Of TKey).Add
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: Global.GenericMap`1.TryGetValue*
  commentId: Overload:Global.GenericMap`1.TryGetValue
  name: TryGetValue
  nameWithType: GenericMap<TKey>.TryGetValue
  fullName: GenericMap<TKey>.TryGetValue
  nameWithType.vb: GenericMap(Of TKey).TryGetValue
  fullName.vb: GenericMap(Of TKey).TryGetValue
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Global.GenericMap`1.ContainsKey*
  commentId: Overload:Global.GenericMap`1.ContainsKey
  name: ContainsKey
  nameWithType: GenericMap<TKey>.ContainsKey
  fullName: GenericMap<TKey>.ContainsKey
  nameWithType.vb: GenericMap(Of TKey).ContainsKey
  fullName.vb: GenericMap(Of TKey).ContainsKey
- uid: Global.GenericMap`1.GetValue*
  commentId: Overload:Global.GenericMap`1.GetValue
  name: GetValue
  nameWithType: GenericMap<TKey>.GetValue
  fullName: GenericMap<TKey>.GetValue
  nameWithType.vb: GenericMap(Of TKey).GetValue
  fullName.vb: GenericMap(Of TKey).GetValue
