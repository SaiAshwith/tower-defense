### YamlMime:ManagedReference
items:
- uid: Global.EventRegistry
  commentId: T:Global.EventRegistry
  id: EventRegistry
  parent: Global
  children:
  - Global.EventRegistry.GetEvent(System.String)
  - Global.EventRegistry.GetEvent``2(System.String)
  - Global.EventRegistry.Invoke``2(System.String,``0,``1)
  - Global.EventRegistry.RegisterAction(System.String,UnityEngine.Events.UnityAction)
  - Global.EventRegistry.RegisterAction``2(System.String,UnityEngine.Events.UnityAction{``0,``1})
  langs:
  - csharp
  - vb
  name: EventRegistry
  nameWithType: EventRegistry
  fullName: EventRegistry
  type: Class
  source:
    id: EventRegistry
    path: D:\GitProjects\tower-defense\Assets\Scripts\Events\EventRegistry.cs
    startLine: 7
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nA class to orchestrate all events\n"
  example: []
  syntax:
    content: public static class EventRegistry
    content.vb: Public Module EventRegistry
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Global.EventRegistry.GetEvent(System.String)
  commentId: M:Global.EventRegistry.GetEvent(System.String)
  id: GetEvent(System.String)
  parent: Global.EventRegistry
  langs:
  - csharp
  - vb
  name: GetEvent(String)
  nameWithType: EventRegistry.GetEvent(String)
  fullName: EventRegistry.GetEvent(System.String)
  type: Method
  source:
    id: GetEvent
    path: D:\GitProjects\tower-defense\Assets\Scripts\Events\EventRegistry.cs
    startLine: 16
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nGets you the event associated with the key. Creates one if no event found.\n"
  example: []
  syntax:
    content: public static TDEvent GetEvent(string name)
    parameters:
    - id: name
      type: System.String
      description: Key for event lookup
    return:
      type: Global.TDEvent
      description: TDEvent corresponding to the string
    content.vb: Public Shared Function GetEvent(name As String) As TDEvent
  overload: Global.EventRegistry.GetEvent*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Global.EventRegistry.GetEvent``2(System.String)
  commentId: M:Global.EventRegistry.GetEvent``2(System.String)
  id: GetEvent``2(System.String)
  parent: Global.EventRegistry
  langs:
  - csharp
  - vb
  name: GetEvent<TParam1, TParam2>(String)
  nameWithType: EventRegistry.GetEvent<TParam1, TParam2>(String)
  fullName: EventRegistry.GetEvent<TParam1, TParam2>(System.String)
  type: Method
  source:
    id: GetEvent
    path: D:\GitProjects\tower-defense\Assets\Scripts\Events\EventRegistry.cs
    startLine: 32
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static TDEvent<TParam1, TParam2> GetEvent<TParam1, TParam2>(string name)
    parameters:
    - id: name
      type: System.String
    typeParameters:
    - id: TParam1
    - id: TParam2
    return:
      type: Global.TDEvent{{TParam1},{TParam2}}
    content.vb: Public Shared Function GetEvent(Of TParam1, TParam2)(name As String) As TDEvent(Of TParam1, TParam2)
  overload: Global.EventRegistry.GetEvent*
  nameWithType.vb: EventRegistry.GetEvent(Of TParam1, TParam2)(String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventRegistry.GetEvent(Of TParam1, TParam2)(System.String)
  name.vb: GetEvent(Of TParam1, TParam2)(String)
- uid: Global.EventRegistry.RegisterAction(System.String,UnityEngine.Events.UnityAction)
  commentId: M:Global.EventRegistry.RegisterAction(System.String,UnityEngine.Events.UnityAction)
  id: RegisterAction(System.String,UnityEngine.Events.UnityAction)
  parent: Global.EventRegistry
  langs:
  - csharp
  - vb
  name: RegisterAction(String, UnityAction)
  nameWithType: EventRegistry.RegisterAction(String, UnityAction)
  fullName: EventRegistry.RegisterAction(System.String, UnityEngine.Events.UnityAction)
  type: Method
  source:
    id: RegisterAction
    path: D:\GitProjects\tower-defense\Assets\Scripts\Events\EventRegistry.cs
    startLine: 53
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nRegisters a zero argument callback for an event. Creates the event if it doesn&apos;t exist.\n"
  example: []
  syntax:
    content: public static bool RegisterAction(string name, UnityAction callback)
    parameters:
    - id: name
      type: System.String
      description: Name of the event
    - id: callback
      type: UnityEngine.Events.UnityAction
      description: Callback to register
    return:
      type: System.Boolean
      description: True if successfully registered
    content.vb: Public Shared Function RegisterAction(name As String, callback As UnityAction) As Boolean
  overload: Global.EventRegistry.RegisterAction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Global.EventRegistry.RegisterAction``2(System.String,UnityEngine.Events.UnityAction{``0,``1})
  commentId: M:Global.EventRegistry.RegisterAction``2(System.String,UnityEngine.Events.UnityAction{``0,``1})
  id: RegisterAction``2(System.String,UnityEngine.Events.UnityAction{``0,``1})
  parent: Global.EventRegistry
  langs:
  - csharp
  - vb
  name: RegisterAction<TParam1, TParam2>(String, UnityAction<TParam1, TParam2>)
  nameWithType: EventRegistry.RegisterAction<TParam1, TParam2>(String, UnityAction<TParam1, TParam2>)
  fullName: EventRegistry.RegisterAction<TParam1, TParam2>(System.String, UnityEngine.Events.UnityAction<TParam1, TParam2>)
  type: Method
  source:
    id: RegisterAction
    path: D:\GitProjects\tower-defense\Assets\Scripts\Events\EventRegistry.cs
    startLine: 68
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static bool RegisterAction<TParam1, TParam2>(string name, UnityAction<TParam1, TParam2> callback)
    parameters:
    - id: name
      type: System.String
    - id: callback
      type: UnityEngine.Events.UnityAction{{TParam1},{TParam2}}
    typeParameters:
    - id: TParam1
    - id: TParam2
    return:
      type: System.Boolean
    content.vb: Public Shared Function RegisterAction(Of TParam1, TParam2)(name As String, callback As UnityAction(Of TParam1, TParam2)) As Boolean
  overload: Global.EventRegistry.RegisterAction*
  nameWithType.vb: EventRegistry.RegisterAction(Of TParam1, TParam2)(String, UnityAction(Of TParam1, TParam2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventRegistry.RegisterAction(Of TParam1, TParam2)(System.String, UnityEngine.Events.UnityAction(Of TParam1, TParam2))
  name.vb: RegisterAction(Of TParam1, TParam2)(String, UnityAction(Of TParam1, TParam2))
- uid: Global.EventRegistry.Invoke``2(System.String,``0,``1)
  commentId: M:Global.EventRegistry.Invoke``2(System.String,``0,``1)
  id: Invoke``2(System.String,``0,``1)
  parent: Global.EventRegistry
  langs:
  - csharp
  - vb
  name: Invoke<TParam1, TParam2>(String, TParam1, TParam2)
  nameWithType: EventRegistry.Invoke<TParam1, TParam2>(String, TParam1, TParam2)
  fullName: EventRegistry.Invoke<TParam1, TParam2>(System.String, TParam1, TParam2)
  type: Method
  source:
    id: Invoke
    path: D:\GitProjects\tower-defense\Assets\Scripts\Events\EventRegistry.cs
    startLine: 83
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static void Invoke<TParam1, TParam2>(string name, TParam1 param1, TParam2 param2)
    parameters:
    - id: name
      type: System.String
    - id: param1
      type: '{TParam1}'
    - id: param2
      type: '{TParam2}'
    typeParameters:
    - id: TParam1
    - id: TParam2
    content.vb: Public Shared Sub Invoke(Of TParam1, TParam2)(name As String, param1 As TParam1, param2 As TParam2)
  overload: Global.EventRegistry.Invoke*
  nameWithType.vb: EventRegistry.Invoke(Of TParam1, TParam2)(String, TParam1, TParam2)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EventRegistry.Invoke(Of TParam1, TParam2)(System.String, TParam1, TParam2)
  name.vb: Invoke(Of TParam1, TParam2)(String, TParam1, TParam2)
references:
- uid: Global
  name: Global
  nameWithType: Global
  fullName: Global
  nameWithType.vb: ''
  fullName.vb: ''
  name.vb: ''
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Global.EventRegistry.GetEvent*
  commentId: Overload:Global.EventRegistry.GetEvent
  name: GetEvent
  nameWithType: EventRegistry.GetEvent
  fullName: EventRegistry.GetEvent
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Global.TDEvent
  commentId: T:Global.TDEvent
  name: TDEvent
  nameWithType: TDEvent
  fullName: TDEvent
- uid: Global.TDEvent{{TParam1},{TParam2}}
  commentId: T:Global.TDEvent{``0,``1}
  definition: Global.TDEvent`2
  name: TDEvent<TParam1, TParam2>
  nameWithType: TDEvent<TParam1, TParam2>
  fullName: TDEvent<TParam1, TParam2>
  nameWithType.vb: TDEvent(Of TParam1, TParam2)
  fullName.vb: TDEvent(Of TParam1, TParam2)
  name.vb: TDEvent(Of TParam1, TParam2)
  spec.csharp:
  - uid: Global.TDEvent`2
    name: TDEvent
    nameWithType: TDEvent
    fullName: TDEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TParam1
    nameWithType: TParam1
    fullName: TParam1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParam2
    nameWithType: TParam2
    fullName: TParam2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Global.TDEvent`2
    name: TDEvent
    nameWithType: TDEvent
    fullName: TDEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParam1
    nameWithType: TParam1
    fullName: TParam1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParam2
    nameWithType: TParam2
    fullName: TParam2
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.TDEvent`2
  commentId: T:Global.TDEvent`2
  name: TDEvent<TParam1, TParam2>
  nameWithType: TDEvent<TParam1, TParam2>
  fullName: TDEvent<TParam1, TParam2>
  nameWithType.vb: TDEvent(Of TParam1, TParam2)
  fullName.vb: TDEvent(Of TParam1, TParam2)
  name.vb: TDEvent(Of TParam1, TParam2)
  spec.csharp:
  - uid: Global.TDEvent`2
    name: TDEvent
    nameWithType: TDEvent
    fullName: TDEvent
  - name: <
    nameWithType: <
    fullName: <
  - name: TParam1
    nameWithType: TParam1
    fullName: TParam1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParam2
    nameWithType: TParam2
    fullName: TParam2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Global.TDEvent`2
    name: TDEvent
    nameWithType: TDEvent
    fullName: TDEvent
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParam1
    nameWithType: TParam1
    fullName: TParam1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParam2
    nameWithType: TParam2
    fullName: TParam2
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.EventRegistry.RegisterAction*
  commentId: Overload:Global.EventRegistry.RegisterAction
  name: RegisterAction
  nameWithType: EventRegistry.RegisterAction
  fullName: EventRegistry.RegisterAction
- uid: UnityEngine.Events.UnityAction
  commentId: T:UnityEngine.Events.UnityAction
  parent: UnityEngine.Events
  isExternal: true
  name: UnityAction
  nameWithType: UnityAction
  fullName: UnityEngine.Events.UnityAction
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: UnityEngine.Events
  commentId: N:UnityEngine.Events
  isExternal: true
  name: UnityEngine.Events
  nameWithType: UnityEngine.Events
  fullName: UnityEngine.Events
- uid: UnityEngine.Events.UnityAction{{TParam1},{TParam2}}
  commentId: T:UnityEngine.Events.UnityAction{``0,``1}
  parent: UnityEngine.Events
  definition: UnityEngine.Events.UnityAction`2
  name: UnityAction<TParam1, TParam2>
  nameWithType: UnityAction<TParam1, TParam2>
  fullName: UnityEngine.Events.UnityAction<TParam1, TParam2>
  nameWithType.vb: UnityAction(Of TParam1, TParam2)
  fullName.vb: UnityEngine.Events.UnityAction(Of TParam1, TParam2)
  name.vb: UnityAction(Of TParam1, TParam2)
  spec.csharp:
  - uid: UnityEngine.Events.UnityAction`2
    name: UnityAction
    nameWithType: UnityAction
    fullName: UnityEngine.Events.UnityAction
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParam1
    nameWithType: TParam1
    fullName: TParam1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParam2
    nameWithType: TParam2
    fullName: TParam2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: UnityEngine.Events.UnityAction`2
    name: UnityAction
    nameWithType: UnityAction
    fullName: UnityEngine.Events.UnityAction
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParam1
    nameWithType: TParam1
    fullName: TParam1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TParam2
    nameWithType: TParam2
    fullName: TParam2
  - name: )
    nameWithType: )
    fullName: )
- uid: UnityEngine.Events.UnityAction`2
  commentId: T:UnityEngine.Events.UnityAction`2
  isExternal: true
  name: UnityAction<T0, T1>
  nameWithType: UnityAction<T0, T1>
  fullName: UnityEngine.Events.UnityAction<T0, T1>
  nameWithType.vb: UnityAction(Of T0, T1)
  fullName.vb: UnityEngine.Events.UnityAction(Of T0, T1)
  name.vb: UnityAction(Of T0, T1)
  spec.csharp:
  - uid: UnityEngine.Events.UnityAction`2
    name: UnityAction
    nameWithType: UnityAction
    fullName: UnityEngine.Events.UnityAction
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T0
    nameWithType: T0
    fullName: T0
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: UnityEngine.Events.UnityAction`2
    name: UnityAction
    nameWithType: UnityAction
    fullName: UnityEngine.Events.UnityAction
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T0
    nameWithType: T0
    fullName: T0
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.EventRegistry.Invoke*
  commentId: Overload:Global.EventRegistry.Invoke
  name: Invoke
  nameWithType: EventRegistry.Invoke
  fullName: EventRegistry.Invoke
- uid: '{TParam1}'
  commentId: '!:TParam1'
  definition: TParam1
  name: TParam1
  nameWithType: TParam1
  fullName: TParam1
- uid: '{TParam2}'
  commentId: '!:TParam2'
  definition: TParam2
  name: TParam2
  nameWithType: TParam2
  fullName: TParam2
- uid: TParam1
  commentId: '!:TParam1'
  name: TParam1
  nameWithType: TParam1
  fullName: TParam1
- uid: TParam2
  commentId: '!:TParam2'
  name: TParam2
  nameWithType: TParam2
  fullName: TParam2
